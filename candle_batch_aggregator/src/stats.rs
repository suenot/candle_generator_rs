use std::collections::HashMap;
use std::time::{Duration, Instant};

#[derive(Debug, Default)]
pub struct ProcessingStats {
    pub total_files: usize,
    pub total_trades: usize,
    pub total_candles: HashMap<String, usize>, // timeframe -> count
    pub processing_time: Duration,
    pub trade_processing_time: Duration,
    pub aggregation_time: Duration,
    pub io_time: Duration,
    start_time: Option<Instant>,
}

impl ProcessingStats {
    pub fn new() -> Self {
        Self::default()
    }
    pub fn start(&mut self) {
        self.start_time = Some(Instant::now());
    }
    pub fn stop(&mut self) {
        if let Some(start) = self.start_time {
            self.processing_time = start.elapsed();
        }
    }
    pub fn add_file(&mut self) {
        self.total_files += 1;
    }
    pub fn add_trades(&mut self, n: usize) {
        self.total_trades += n;
    }
    pub fn add_candles(&mut self, tf: &str, n: usize) {
        *self.total_candles.entry(tf.to_string()).or_default() += n;
    }
}

pub fn print_summary(stats: &ProcessingStats) {
    println!("\n=== Processing Summary ===");
    println!("Total files processed: {}", stats.total_files);
    println!("Total trades processed: {}", stats.total_trades);
    println!("Candles generated by timeframe:");
    let mut tfs: Vec<_> = stats.total_candles.iter().collect();
    tfs.sort_by_key(|&(tf, _)| tf.clone());
    for (tf, count) in tfs {
        println!("  {:<8} candles: {}", tf, count);
    }
    println!("\nTiming breakdown:");
    println!("  Total processing time: {:.2?}", stats.processing_time);
    println!("  Trade processing time: {:.2?}", stats.trade_processing_time);
    println!("  Aggregation time: {:.2?}", stats.aggregation_time);
    println!("  I/O time: {:.2?}", stats.io_time);
    if stats.trade_processing_time.as_secs_f64() > 0.0 {
        let tps = stats.total_trades as f64 / stats.trade_processing_time.as_secs_f64();
        println!("\nPerformance metrics:");
        println!("  Trades processed per second: {:.0}", tps);
    }
} 